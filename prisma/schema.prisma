// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Change this to "mysql" or "sqlite" if using a different DB
  url      = env("DIRECT_URL") // Add this variable in your .env file
}

enum Role {
  ADMIN
  USER
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  role      Role     @default(ADMIN)
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Order {
  id            String @id @default(uuid())
  customerName  String
  customerEmail String
  status        String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // Relation with Payment
  paymentId String
  payment   Payment @relation(fields: [paymentId], references: [id])

  //  Relation with book
  bookId String
  book   Book   @relation(fields: [bookId], references: [id])
}

model Payment {
  id String @id @default(uuid())

  amount Int
  status PaymentStatus

  order Order[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // Relation with Order

}

model Book {
  id String @id @default(uuid())

  name        String
  actualPrice Int
  offerPrice  Int
  order       Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum PaymentStatus {
  SUCCESS
  CANCELED
  FAILED
}

model Clicks {
  id String @id @default(uuid())

  totalClicks Int @default(0)

  day Int
  month Int
  year Int

 
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt 
}
